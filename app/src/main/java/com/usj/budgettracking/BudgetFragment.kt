package com.usj.budgettracking

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.appcompat.app.AlertDialog
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.recyclerview.widget.LinearLayoutManager
import com.usj.budgettracking.data.BudgetCategory
import com.usj.budgettracking.databinding.DialogAddCategoryBinding
import com.usj.budgettracking.databinding.FragmentBudgetBinding
import com.usj.budgettracking.viewmodel.BudgetViewModel

class BudgetFragment : Fragment() {

    private var _binding: FragmentBudgetBinding? = null
    private val binding get() = _binding!!
    private lateinit var budgetAdapter: BudgetAdapter

    private val budgetViewModel: BudgetViewModel by activityViewModels()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentBudgetBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        setupRecyclerView()
        setupObservers()

        binding.btnAddCategory.setOnClickListener {
            showAddCategoryDialog()
        }
    }

    private fun setupRecyclerView() {
        budgetAdapter = BudgetAdapter(
            onItemEdit = { category -> showEditCategoryDialog(category) },
            onItemDelete = { category -> deleteCategory(category) }
        )
        binding.budgetRecyclerView.layoutManager = LinearLayoutManager(requireContext())
        binding.budgetRecyclerView.adapter = budgetAdapter
    }

    private fun setupObservers() {
        budgetViewModel.categories.observe(viewLifecycleOwner) { categories ->
            if (categories.isEmpty()) {
                binding.emptyView.visibility = View.VISIBLE
                binding.budgetRecyclerView.visibility = View.GONE
            } else {
                binding.emptyView.visibility = View.GONE
                binding.budgetRecyclerView.visibility = View.VISIBLE
            }
            budgetAdapter.submitList(categories)
        }
    }

    private fun showAddCategoryDialog() {
        val dialogBinding = DialogAddCategoryBinding.inflate(layoutInflater)

        val dialog = AlertDialog.Builder(requireContext())
            .setView(dialogBinding.root)
            .setTitle("Add Budget Category")
            .setPositiveButton("Add") { _, _ ->
                val name = dialogBinding.categoryNameInput.text.toString()
                val budgetAmount = dialogBinding.budgetAmountInput.text.toString().toDoubleOrNull()

                if (name.isNotBlank() && budgetAmount != null && budgetAmount > 0) {
                    val newCategory = BudgetCategory(
                        id = null, // Assuming ID is auto-generated by the database
                        name = name,
                        budget = budgetAmount,
                        currentSpending = 0.0
                    )
                    budgetViewModel.insertCategory(newCategory)
                } else {
                    AlertDialog.Builder(requireContext())
                        .setTitle("Invalid Input")
                        .setMessage("Please enter a valid name and budget amount.")
                        .setPositiveButton("OK", null)
                        .create()
                        .show()
                }
            }
            .setNegativeButton("Cancel", null)
            .create()
        dialog.show()
    }

    private fun showEditCategoryDialog(category: BudgetCategory) {
        val dialogBinding = DialogAddCategoryBinding.inflate(layoutInflater)

        // Pre-fill existing data
        dialogBinding.categoryNameInput.setText(category.name)
        dialogBinding.budgetAmountInput.setText(category.budget.toString())

        val dialog = AlertDialog.Builder(requireContext())
            .setView(dialogBinding.root)
            .setTitle("Edit Budget Category")
            .setPositiveButton("Update") { _, _ ->
                val updatedName = dialogBinding.categoryNameInput.text.toString()
                val updatedBudget = dialogBinding.budgetAmountInput.text.toString().toDoubleOrNull()

                if (updatedName.isNotBlank() && updatedBudget != null && updatedBudget > 0) {
                    val updatedCategory = category.copy(
                        name = updatedName,
                        budget = updatedBudget
                    )
                    budgetViewModel.updateCategory(updatedCategory)
                } else {
                    AlertDialog.Builder(requireContext())
                        .setTitle("Invalid Input")
                        .setMessage("Please enter a valid name and budget amount.")
                        .setPositiveButton("OK", null)
                        .create()
                        .show()
                }
            }
            .setNegativeButton("Cancel", null)
            .create()
        dialog.show()
    }

    private fun deleteCategory(category: BudgetCategory) {
        AlertDialog.Builder(requireContext())
            .setTitle("Delete Category")
            .setMessage("Are you sure you want to delete this category? All associated expenses will be deleted.")
            .setPositiveButton("Yes") { _, _ ->
                budgetViewModel.deleteCategory(category)
            }
            .setNegativeButton("No", null)
            .create()
            .show()
    }

    override fun onResume() {
        super.onResume()
        budgetViewModel.refreshCategories()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
